package org.usfirst.frc.team4786.robot.subsystems;
 
import org.usfirst.frc.team4786.robot.RobotMap;
import org.usfirst.frc.team4786.robot.commands.Drive;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard; 

public class DriveTrain extends Subsystem { 
 	 
 	//CANTalon objects 
 	CANTalon backLeft = new CANTalon(RobotMap.backLeftPort); 
 	CANTalon backRight = new CANTalon(RobotMap.backRightPort); 
 	CANTalon frontLeft = new CANTalon(RobotMap.frontLeftPort); 
 	CANTalon frontRight = new CANTalon(RobotMap.frontRightPort); 
 	 
 	public DriveTrain(){ 
 		//follower code, assign variables 
 		backLeft.changeControlMode(CANTalon.TalonControlMode.Follower); 
 		backRight.changeControlMode(CANTalon.TalonControlMode.Follower); 
 		backLeft.set(RobotMap.frontLeftPort); 
 		backRight.set(RobotMap.frontRightPort); 
 		frontLeft.setInverted(true);
/* 		
 		//Begin PID Code
 		frontLeft.changeControlMode(CANTalon.TalonControlMode.Position);
 		frontRight.changeControlMode(CANTalon.TalonControlMode.Position);
 		
 		frontLeft.setEncPosition(0);
 		frontRight.setEncPosition(0);
 		
 		frontLeft.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
 		frontRight.setFeedbackDevice(CANTalon.FeedbackDevice.QuadEncoder);
 		
 		frontLeft.reverseSensor(false);
 		frontRight.reverseSensor(false);
 		
 		frontLeft.setAllowableClosedLoopErr()
 */
 		//this inverts the cantalons on the right side 
 	} 
     // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS 
 	 
     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS 
 
 
      
     // Put methods for controlling this subsystem 
     // here. Call these from Commands. 
 
 
     public void initDefaultCommand() { 
         // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND 
         setDefaultCommand(new Drive()); 
 
 
     // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND 
 	 
         // Set the default command for a subsystem here. 
     } 
      
 	public void brake(){ 
 		//zero is to brake 
     	frontRight.set(0); 
     	frontLeft.set(0); 
     } 
 
 
 	public void readEncoderTicks() {
 		
 		int blTicks = backLeft.getEncPosition();
 		int brTicks = backRight.getEncPosition();
 		int flTicks = frontLeft.getEncPosition();
 		int frTicks = frontRight.getEncPosition();
 		
 		SmartDashboard.putNumber("BackLeft Encoder: ", blTicks);
 		SmartDashboard.putNumber("BackRight Encoder: ", brTicks);
 		SmartDashboard.putNumber("FrontLeft Encoder: ", flTicks);
 		SmartDashboard.putNumber("FrontRight Encoder: ", frTicks);
 		
 	}
 
 	public void drive(double leftInput, double rightInput) { 
 		//scales between 1 and 1 
 		//did this because we don't know what the maximum speed of the motors is 
 		double leftOutput = leftInput * RobotMap.scaling; 
 		double rightOutput = rightInput * RobotMap.scaling; 
 		frontLeft.set(leftOutput); 
 		frontRight.set(rightOutput);
 		this.readEncoderTicks();
 	} 
 
 	public void drivePID(double leftInput, double rightInput) {
 		
 	}
 } 
